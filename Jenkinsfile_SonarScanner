pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        SONAR_TOKEN = credentials('sonarqube-token')
    }

    stages {
        stage('Dependency Check') {
            steps {
                sh '''
                    mkdir -p dependency-check-report
                    dependency-check.sh \
                      --project "DevOpsBuildToolDemo" \
                      --format HTML \
                      --format XML \
                      --scan . \
                      --out dependency-check-report
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.login=$SONAR_TOKEN \
                        -Dsonar.dependencyCheck.reportPath=dependency-check-report/dependency-check-report.xml
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'dependency-check-report/**', fingerprint: true
            publishHTML (target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'dependency-check-report',
                reportFiles: 'dependency-check-report.html',
                reportName: 'OWASP Dependency-Check Report'
            ])
        }
    }
}
